# -*- coding: utf-8 -*-
"""Energy_optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vu93fc1hxgVR10cZjHj3zt7JkS_ta9q7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

def simulate_data(days=30):
    np.random.seed(42)
    temperature = np.random.normal(25, 5, days)
    occupancy = np.random.randint(1, 5, days)
    appliance_usage = np.random.normal(1.5, 0.5, days)
    energy_usage = 0.5 * temperature + 1.2 * occupancy + 2 * appliance_usage + np.random.normal(0, 1, days)
    return pd.DataFrame({
        'Temperature': temperature,
        'Occupancy': occupancy,
        'Appliance_Usage': appliance_usage,
        'Energy_Usage': energy_usage
    })

def train_model(data):
    X = data[['Temperature', 'Occupancy', 'Appliance_Usage']]
    y = data['Energy_Usage']
    model = LinearRegression()
    model.fit(X, y)
    predictions = model.predict(X)
    mse = mean_squared_error(y, predictions)
    print("Model trained with MSE:", round(mse, 2))
    return model

def recommend_optimization(model):
    test_input = pd.DataFrame({
        'Temperature': [28],
        'Occupancy': [3],
        'Appliance_Usage': [2.0]
    })
    predicted_energy = model.predict(test_input)[0]
    print(f"\nPredicted Energy Usage: {predicted_energy:.2f} kWh")
    if predicted_energy > 15:
        print("⚠ High energy usage predicted. Recommendations:")
        print("- Reduce appliance usage during peak hours")
        print("- Increase insulation to reduce cooling costs")
        print("- Use smart thermostats to optimize AC usage")
    else:
        print("✅ Energy usage is within efficient range")

def main():
    print("Simulating energy data...")
    data = simulate_data()
    print("\nTraining energy prediction model...")
    model = train_model(data)
    print("\nPredicting and suggesting optimizations...")
    recommend_optimization(model)
    plt.figure(figsize=(10, 5))
    plt.plot(data['Energy_Usage'], label='Energy Usage (kWh)', marker='o')
    plt.title("Simulated Energy Usage Over Time")
    plt.xlabel("Day")
    plt.ylabel("Energy (kWh)")
    plt.legend()
    plt.grid(True)
    plt.savefig('energy_usage_plot.png')  # Save plot as image
    plt.show()

# ✅ Fixed the name guard here
if __name__ == "__main__":
    main()

